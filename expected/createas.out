CREATE EXTENSION orioledb;
CREATE TABLE o_test_create_as (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
-- Should fail - exists
CREATE TABLE o_test_create_as (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
ERROR:  relation "o_test_create_as" already exists
SELECT * FROM o_test_create_as;
 order_id | item_id | quantity | price  
----------+---------+----------+--------
      100 |       1 |        4 | 100.00
      100 |       3 |        1 | 200.00
(2 rows)

BEGIN;
CREATE TABLE o_test_create_as_abort (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
SELECT * FROM o_test_create_as_abort;
 order_id | item_id | quantity | price  
----------+---------+----------+--------
      100 |       1 |        4 | 100.00
      100 |       3 |        1 | 200.00
(2 rows)

ROLLBACK;
CREATE TABLE o_test_create_as_less_atts (order_id, item_id)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
SELECT * FROM o_test_create_as_less_atts;
 order_id | item_id | column3 | column4 
----------+---------+---------+---------
      100 |       1 |       4 |  100.00
      100 |       3 |       1 |  200.00
(2 rows)

CREATE TABLE o_test_create_as_no_atts
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
SELECT * FROM o_test_create_as_no_atts;
 column1 | column2 | column3 | column4 
---------+---------+---------+---------
     100 |       1 |       4 |  100.00
     100 |       3 |       1 |  200.00
(2 rows)

CREATE TABLE o_test_create_as_with_compress (order_id, item_id, quantity, price)
	USING orioledb WITH (compress = 1) AS
		(VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00));
SELECT orioledb_tbl_indices('o_test_create_as_with_compress'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index ctid_primary                                    +
     Index type: primary, unique, compression = 1, ctid+
     Leaf tuple size: 5, non-leaf tuple size: 1        +
     Non-leaf tuple fields: ctid                       +
 
(1 row)

SELECT * FROM o_test_create_as_with_compress;
 order_id | item_id | quantity | price  
----------+---------+----------+--------
      100 |       1 |        4 | 100.00
      100 |       3 |        1 | 200.00
(2 rows)

CREATE TABLE o_test_create_as_with_data (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00))
	WITH DATA;
SELECT * FROM o_test_create_as_with_data;
 order_id | item_id | quantity | price  
----------+---------+----------+--------
      100 |       1 |        4 | 100.00
      100 |       3 |        1 | 200.00
(2 rows)

SELECT relname FROM orioledb_table_oids()
	JOIN pg_class ON reloid = oid WHERE relname = 'o_test_create_as_with_data';
          relname           
----------------------------
 o_test_create_as_with_data
(1 row)

DROP TABLE o_test_create_as_with_data;
SELECT * FROM o_test_create_as_with_data;
ERROR:  relation "o_test_create_as_with_data" does not exist
LINE 1: SELECT * FROM o_test_create_as_with_data;
                      ^
SELECT relname FROM orioledb_table_oids()
	JOIN pg_class ON reloid = oid WHERE relname = 'o_test_create_as_with_data';
 relname 
---------
(0 rows)

CREATE TABLE o_test_create_as_no_data (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00))
	WITH NO DATA;
SELECT * FROM o_test_create_as_no_data;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
(0 rows)

INSERT INTO o_test_create_as_no_data
	VALUES (100, 1, 4, 100.00), (100, 3, 1, 200.00);
SELECT * FROM o_test_create_as_no_data;
 order_id | item_id | quantity | price  
----------+---------+----------+--------
      100 |       1 |        4 | 100.00
      100 |       3 |        1 | 200.00
(2 rows)

-- EXPLAIN ANALYZE tests
-- Wrapper function, which converts result of SQL query to the text
CREATE OR REPLACE FUNCTION query_to_text(sql TEXT, out result text)
	RETURNS SETOF TEXT AS $$
	BEGIN
		FOR result IN EXECUTE sql LOOP
			RETURN NEXT;
		END LOOP;
	END $$
LANGUAGE plpgsql;
BEGIN;
SET LOCAL default_table_access_method = 'orioledb';
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			SELECT * INTO tbl_into FROM generate_series(1,3) a; $$) as t;
                       regexp_replace                       
------------------------------------------------------------
 Function Scan on generate_series a (actual rows=x loops=x)
(1 row)

COMMIT;
BEGIN;
SET LOCAL default_table_access_method = 'orioledb';
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_nodata (a)
				AS SELECT generate_series(1,3) WITH NO DATA; $$) as t;
        regexp_replace         
-------------------------------
 ProjectSet (never executed)
   ->  Result (never executed)
(2 rows)

SELECT * FROM tbl_as_nodata;
 a 
---
(0 rows)

SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_nodata (a)
				AS SELECT generate_series(1,3) WITH NO DATA; $$) as t;
ERROR:  relation "tbl_as_nodata" already exists
CONTEXT:  PL/pgSQL function query_to_text(text) line 3 at FOR over EXECUTE statement
ROLLBACK;
BEGIN;
SET LOCAL default_table_access_method = 'orioledb';
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_nodata (a)
				AS SELECT generate_series(1,3) WITH NO DATA; $$) as t;
        regexp_replace         
-------------------------------
 ProjectSet (never executed)
   ->  Result (never executed)
(2 rows)

COMMIT;
BEGIN;
SET LOCAL default_table_access_method = 'orioledb';
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_data (a)
				AS SELECT generate_series(1,3) WITH DATA; $$) as t;
            regexp_replace            
--------------------------------------
 ProjectSet (actual rows=x loops=x)
   ->  Result (actual rows=x loops=x)
(2 rows)

SELECT * FROM tbl_as_data;
 a 
---
 1
 2
 3
(3 rows)

SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_data (a)
				AS SELECT generate_series(1,3) WITH DATA; $$) as t;
ERROR:  relation "tbl_as_data" already exists
CONTEXT:  PL/pgSQL function query_to_text(text) line 3 at FOR over EXECUTE statement
ROLLBACK;
BEGIN;
SET LOCAL default_table_access_method = 'orioledb';
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
	FROM query_to_text($$
		EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
			CREATE TABLE tbl_as_data (a)
				AS SELECT generate_series(1,3) WITH DATA; $$) as t;
            regexp_replace            
--------------------------------------
 ProjectSet (actual rows=x loops=x)
   ->  Result (actual rows=x loops=x)
(2 rows)

COMMIT;
SELECT * FROM tbl_into;
 a 
---
 1
 2
 3
(3 rows)

SELECT * FROM tbl_as_nodata;
 a 
---
(0 rows)

SELECT * FROM tbl_as_data;
 a 
---
 1
 2
 3
(3 rows)

CREATE SEQUENCE o_matview_seq;
-- TODO: Implement refresh of materialized view and add tests
-- TODO: Implement indices on materialized views and add tests
-- TODO: Implement alters of materialized view and add tests
CREATE MATERIALIZED VIEW o_test_matview (order_id, item_id, quantity, price)
	USING orioledb AS (VALUES (100, 1, 4, nextval('o_matview_seq'::regclass)),
							  (100, 3, 1, nextval('o_matview_seq'::regclass)));
SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     1
      100 |       3 |        1 |     2
(2 rows)

SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     1
      100 |       3 |        1 |     2
(2 rows)

REFRESH MATERIALIZED VIEW o_test_matview;
SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     3
      100 |       3 |        1 |     4
(2 rows)

SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     3
      100 |       3 |        1 |     4
(2 rows)

REFRESH MATERIALIZED VIEW o_test_matview;
SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     5
      100 |       3 |        1 |     6
(2 rows)

SELECT * FROM o_test_matview;
 order_id | item_id | quantity | price 
----------+---------+----------+-------
      100 |       1 |        4 |     5
      100 |       3 |        1 |     6
(2 rows)

DROP FUNCTION query_to_text;
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to table o_test_create_as
drop cascades to table o_test_create_as_less_atts
drop cascades to table o_test_create_as_no_atts
drop cascades to table o_test_create_as_with_compress
drop cascades to table o_test_create_as_no_data
drop cascades to table tbl_into
drop cascades to table tbl_as_nodata
drop cascades to table tbl_as_data
drop cascades to materialized view o_test_matview
